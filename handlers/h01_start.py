from aiogram import Router, F
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.filters import CommandStart

from keyboards.inline import get_learning_menu
from keyboards.reply import get_start_keyboard
from states.creator import Creator
from aiogram.fsm.context import FSMContext
from settings_ai.settings import ask

router = Router()


@router.message(CommandStart())
async def start(message: Message):
    """–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    photo = FSInputFile("media/banner.jpg")
    await message.answer_photo(
        photo=photo,
        caption="–ü—Ä–∏–≤–µ—Ç üëã\n–Ø –≥–æ—Ç–æ–≤ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=get_start_keyboard()
    )


@router.message(F.text == "I'm ready to talk üëÅ‚Äçüó®")
async def open_learning_menu(message: Message):
    """–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–º–µ–Ω—é"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å üëá",
        reply_markup=get_learning_menu()
    )


@router.callback_query(F.data == "learn_daily")
async def learn_daily(callback: CallbackQuery):
    """Daily routine ‚Äî –∑–∞–ø—Ä–æ—Å –∫ –ò–ò"""
    await callback.message.answer("üöÄ –ü–æ–¥–±–∏—Ä–∞—é —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ *Daily routine*...")

    prompt = (
        "–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 15 –ø–æ–ª–µ–∑–Ω—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ç–µ–º—É 'Daily routine'. "
        "–î–∞–π –∏—Ö –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –ø—Ä–∏–º–µ—Ä –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º."
    )

    response = await ask(prompt)
    await callback.message.answer(response)
    await callback.answer()


@router.callback_query(F.data == "learn_irregular")
async def learn_irregular(callback: CallbackQuery):
    """Irregular verbs ‚Äî –∑–∞–ø—Ä–æ—Å –∫ –ò–ò"""
    await callback.message.answer("üî• –ü–æ–¥–±–∏—Ä–∞—é —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤...")

    prompt = (
        "–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 15 –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–£–∫–∞–∂–∏ —Ç—Ä–∏ —Ñ–æ—Ä–º—ã (Infinitive ‚Äì Past Simple ‚Äì Past Participle) –∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π."
    )

    response = await ask(prompt)
    await callback.message.answer(response)
    await callback.answer()


@router.message(Creator.wait)
async def stop_flood(message: Message):
    """–∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞"""
    await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è,\n–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ üòä")


@router.message()
async def generate(message: Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await state.set_state(Creator.wait)
    response = await ask(message.text)
    await message.answer(response)
    await state.clear()
